stages:
  - init
  - validate
  - plan
  - apply

image: alpine:latest

services:
  - name: docker:19.03.12-dind
    alias: docker

variables:
  TF_ENV: "default"
  TF_WORKING_DIR: "/builds/naidhilebhuvana/terraform_docker_project"
  TF_VERSION: "1.10.5"
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""


before_script:
  - export DOCKER_HOST="tcp://docker:2375"
  - echo "Installing dependencies..."
  - apk add --no-cache curl unzip
  - echo "Installing Terraform..."
  - curl -LO https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
  - ls -lh terraform_${TF_VERSION}_linux_amd64.zip
  - unzip terraform_${TF_VERSION}_linux_amd64.zip -d /usr/local/bin
  - rm terraform_${TF_VERSION}_linux_amd64.zip
  - echo "Ensuring correct Terraform version is installed..."
  - terraform --version
  - echo "Using bash shell..."

terraform-init:
  stage: init
  script:
    - echo "Initializing Terraform for $TF_ENV environment..."
    - cd $TF_WORKING_DIR
    - terraform init -upgrade
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

terraform-validate:
  stage: validate
  script:
    - echo "Validating Terraform configuration for $TF_ENV environment..."
    - cd $TF_WORKING_DIR
    - terraform init -input=false 
    - terraform validate
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

terraform-plan:
  stage: plan
  script:
    - echo "Planning Terraform changes for $TF_ENV environment..."
    - cd $TF_WORKING_DIR
    - terraform init
    - echo terraform plan -out=tfplan
    - echo complete
  artifacts:
    paths:
      - $TF_WORKING_DIR/tfplan
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

terraform-apply:
  stage: apply
  script:
    - echo "Applying Terraform changes for $TF_ENV environment..."
    - echo "complete"
    - cd $TF_WORKING_DIR
    - terraform apply -auto-approve tfplan
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == "master"